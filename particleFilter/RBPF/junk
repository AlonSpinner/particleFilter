def inverse_measurement_model(self, x : pose2, a : np.ndarray, z : np.ndarray): #returns p(m|xt,zt)
#inspired from:
#from probablistic robotics chapter 9, table 9.2
#Algorithm inverse_range_sensor_model

#zt - array of range measurements correlating to laser's angles
disc_x = self.c2d(x.t())
c_occ = []
c_free = []
for ai,zi in zip(a,z):
    dp = (zi*[np.cos(ai),np.sin(ai)]).reshape(-1,1)
    lm = x.transformFrom(np.array(dp))
    disc_lm = self.c2d(lm)
    c_occ.append(disc_lm)
    c_free.extend(bresenham2(disc_x[0],disc_x[1],disc_lm[0],disc_lm[1]))
return c_occ, c_free

def neighbors2(self,c,a = 1):
bot = max(c[0]-a,0)
top = min(c[0]+a,self.height-1)
left = max(c[1]-a,0)
right = min(c[1]+a,self.width-1)

i = np.arange(bot,top+1)
j = np.arange(left,right+1)
iijj = np.meshgrid(i,j)
     
return np.hstack((iijj[0].reshape(-1,1),iijj[1].reshape(-1,1))).tolist()

    # def inverse_measurement_model(self, x: pose2, z: np.ndarray, laser : laser2):
    #     #based on "Algorithm inverse_range_sensor_model" from page 288 Probalistic Robotics
    #     c_occ = []
    #     c_free = []
    #     for i,zi in enumerate(z):
    #         idx_occ = np.argwhere((abs(laser.localraymap[i].z - zi) < laser.alpha/2) & (laser.localraymap[i].z < laser.zmax)).squeeze()
    #         if np.any(idx_occ):
    #             c_occ.append(self.c2d(x.transformFrom(laser.localraymap[i].t[:,idx_occ])))
    
    #         idx_free = np.argwhere(abs(laser.localraymap[i].z < zi)).squeeze()
    #         if np.any(idx_free):
    #             c_free.append(self.c2d(x.transformFrom(laser.localraymap[i].t[:,idx_free])))

    #     return np.hstack(c_occ), np.hstack(c_free)

